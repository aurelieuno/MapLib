{"version":3,"sources":["../src/Radio.test.js"],"names":["describe","it","shallow","testClassName","childClassName","first","prop","expect","to","contain","options","label","value","radioFieldset","children","eq","testOptions","mount","find"],"mappings":";;AAAA;;;;;;AAEAA,SAAS,OAAT,EAAkB,YAAM;AACtBC,KAAG,gCAAH,EAAqC,YAAM;AACzCC,YAAQ,0CAAR;AACD,GAFD;;AAIAD,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAME,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiBF,QAAQ,uCAAO,WAAWC,aAAlB,GAAR,EACpBE,KADoB,GAEpBC,IAFoB,CAEf,WAFe,CAAvB;;AAIAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GARD;AASD,CAdD;;AAgBAH,SAAS,gBAAT,EAA2B,YAAM;AAC/B,MAAMU,UAAU,CACd,EAACC,OAAO,MAAR,EAAgBC,OAAO,GAAvB,EADc,EAEd,EAACD,OAAO,OAAR,EAAiBC,OAAO,GAAxB,EAFc,CAAhB;;AAKAX,KAAG,gCAAH,EAAqC,YAAM;AACzCC,YAAQ,oCAAO,QAAP,IAAgB,SAASQ,OAAzB,GAAR;AACD,GAFD;;AAIAT,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAME,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiBF,QACrB,oCAAO,QAAP,IAAgB,WAAWC,aAA3B,EAA0C,SAASO,OAAnD,GADqB,EAGpBL,KAHoB,GAIpBC,IAJoB,CAIf,WAJe,CAAvB;;AAMAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GAVD;;AAYAF,KAAG,gCAAH,EAAqC,YAAM;AACzC,QAAMY,gBAAgBX,QACpB,oCAAO,QAAP,IAAgB,OAAM,GAAtB,EAA0B,SAASQ,OAAnC,GADoB,CAAtB;;AAIAH,WAAOM,cAAcC,QAAd,GAAyBT,KAAzB,GAAiCC,IAAjC,CAAsC,SAAtC,CAAP,EAAyDE,EAAzD,CAA4DO,EAA5D,CAA+D,IAA/D;AACD,GAND;;AAQAd,KAAG,2BAAH,EAAgC,YAAM;AACpC,QAAMY,gBAAgBX,QACpB,oCAAO,QAAP,IAAgB,cAAa,GAA7B,EAAiC,SAASQ,OAA1C,GADoB,CAAtB;;AAIAH,WAAOM,cAAcC,QAAd,GAAyBT,KAAzB,GAAiCC,IAAjC,CAAsC,gBAAtC,CAAP,EAAgEE,EAAhE,CAAmEO,EAAnE,CAAsE,IAAtE;AACD,GAND;;AAQAd,KAAG,0EAAH,EAA+E,YAAM;AACnF,QAAMW,QAAQ,mBAAd;AACA,QAAMI,cAAc,CAAC,EAACJ,YAAD,EAAD,CAApB;AACA,QAAMC,gBAAgBI,MAAM,oCAAO,QAAP,IAAgB,SAASD,WAAzB,GAAN,CAAtB;AACAT,WAAOM,cAAcK,IAAd,CAAmB,OAAnB,EAA4BZ,IAA5B,CAAiC,OAAjC,CAAP,EAAkDE,EAAlD,CAAqDO,EAArD,CAAwDH,KAAxD;AACD,GALD;AAMD,CA5CD","file":"Radio.test.js","sourcesContent":["import Radio from './Radio'\n\ndescribe('Radio', () => {\n  it('should render without throwing', () => {\n    shallow(<Radio />)\n  })\n\n  it('should add className to child', () => {\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(<Radio className={testClassName} />)\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(testClassName)\n  })\n})\n\ndescribe('Radio.Fieldset', () => {\n  const options = [\n    {label: 'Left', value: 'L'},\n    {label: 'Right', value: 'R'},\n  ]\n\n  it('should render without throwing', () => {\n    shallow(<Radio.Fieldset options={options} />)\n  })\n\n  it('should add className to child', () => {\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(\n      <Radio.Fieldset className={testClassName} options={options} />\n    )\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(testClassName)\n  })\n\n  it('can handle the controlled case', () => {\n    const radioFieldset = shallow(\n      <Radio.Fieldset value=\"L\" options={options} />\n    )\n\n    expect(radioFieldset.children().first().prop('checked')).to.eq(true)\n  })\n\n  it('can handle default values', () => {\n    const radioFieldset = shallow(\n      <Radio.Fieldset defaultValue=\"L\" options={options} />\n    )\n\n    expect(radioFieldset.children().first().prop('defaultChecked')).to.eq(true)\n  })\n\n  it('should respect option values even when there is no value or defaultValue', () => {\n    const value = 'OPTION_TEST_VALUE'\n    const testOptions = [{value}]\n    const radioFieldset = mount(<Radio.Fieldset options={testOptions} />)\n    expect(radioFieldset.find('input').prop('value')).to.eq(value)\n  })\n})\n"]}