{"version":3,"sources":["../src/FileInput.test.js"],"names":["describe","it","shallow","testClassName","childClassName","first","prop","expect","to","contain","spy","input","mount","find","simulate","currentTarget","value","called","eq"],"mappings":";;AAAA;;;;AACA;;;;;;AAEAA,SAAS,WAAT,EAAsB,YAAM;AAC1BC,KAAG,gCAAH,EAAqC,YAAM;AACzCC,YAAQ,8CAAR;AACD,GAFD;;AAIAD,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAME,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiBF,QAAQ,2CAAW,WAAWC,aAAtB,GAAR,EACpBE,KADoB,GAEpBC,IAFoB,CAEf,WAFe,CAAvB;;AAIAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GARD;;AAUAF,KAAG,0CAAH,EAA+C,YAAM;AACnD,QAAMS,MAAM,gBAAMA,GAAN,EAAZ;AACA,QAAMC,QAAQC,MAAM,2CAAW,UAAUF,GAArB,GAAN,CAAd;;AAEAC,UAAME,IAAN,CAAW,OAAX,EAAoBC,QAApB,CAA6B,QAA7B,EAAuC,EAACC,eAAe,EAACC,OAAO,gCAAR,EAAhB,EAAvC;;AAEAT,WAAOG,IAAIO,MAAX,EAAmBT,EAAnB,CAAsBU,EAAtB,CAAyB,IAAzB;AACD,GAPD;;AASAjB,KAAG,0CAAH,EAA+C,YAAM;AACnD,QAAMU,QAAQC,MAAM,8CAAN,CAAd;;AAEAD,UAAME,IAAN,CAAW,OAAX,EAAoBC,QAApB,CAA6B,QAA7B,EAAuC,EAACC,eAAe,EAACC,OAAO,gCAAR,EAAhB,EAAvC;AACD,GAJD;AAKD,CA7BD;;AA+BAhB,SAAS,iBAAT,EAA4B,YAAM;AAChCC,KAAG,gCAAH,EAAqC,YAAM;AACzCC,YAAQ,wCAAW,KAAX,OAAR;AACD,GAFD;;AAIAD,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAME,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiBF,QAAQ,wCAAW,KAAX,IAAiB,WAAWC,aAA5B,GAAR,EACpBE,KADoB,GAEpBC,IAFoB,CAEf,WAFe,CAAvB;;AAIAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GARD;AASD,CAdD","file":"FileInput.test.js","sourcesContent":["import FileInput from './FileInput'\nimport sinon from 'sinon'\n\ndescribe('FileInput', () => {\n  it('should render without throwing', () => {\n    shallow(<FileInput />)\n  })\n\n  it('should add className to child', () => {\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(<FileInput className={testClassName} />)\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(testClassName)\n  })\n\n  it('can handle changes with onChange handler', () => {\n    const spy = sinon.spy()\n    const input = mount(<FileInput onChange={spy} />)\n\n    input.find('input').simulate('change', {currentTarget: {value: 'C:\\\\fakepath\\\\snack-falcon.jpg'}})\n\n    expect(spy.called).to.eq(true)\n  })\n\n  it('can handle changes with onChange handler', () => {\n    const input = mount(<FileInput />)\n\n    input.find('input').simulate('change', {currentTarget: {value: 'C:\\\\fakepath\\\\snack-falcon.jpg'}})\n  })\n})\n\ndescribe('FileInput.Stack', () => {\n  it('should render without throwing', () => {\n    shallow(<FileInput.Stack />)\n  })\n\n  it('should add className to child', () => {\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(<FileInput.Stack className={testClassName} />)\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(testClassName)\n  })\n})\n"]}