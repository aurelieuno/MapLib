{"version":3,"sources":["../src/Checkbox.test.js"],"names":["describe","it","shallow","testClassName","childClassName","first","prop","expect","to","contain","options","label","value","fieldset","children","eq"],"mappings":";;AAAA;;;;;;AAEAA,SAAS,UAAT,EAAqB,YAAM;AACzBC,KAAG,gCAAH,EAAqC,YAAM;AACzCC,YAAQ,6CAAR;AACD,GAFD;;AAIAD,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAME,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiBF,QAAQ,0CAAU,WAAWC,aAArB,GAAR,EACpBE,KADoB,GAEpBC,IAFoB,CAEf,WAFe,CAAvB;;AAIAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GARD;AASD,CAdD;;AAgBAH,SAAS,mBAAT,EAA8B,YAAM;AAClC,MAAMU,UAAU,CACd,EAACC,OAAO,MAAR,EAAgBC,OAAO,GAAvB,EADc,EAEd,EAACD,OAAO,OAAR,EAAiBC,OAAO,GAAxB,EAFc,CAAhB;;AAKAX,KAAG,gCAAH,EAAqC,YAAM;AACzCC,YAAQ,uCAAU,QAAV,IAAmB,SAASQ,OAA5B,GAAR;AACD,GAFD;;AAIAT,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAME,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiBF,QACrB,uCAAU,QAAV,IAAmB,WAAWC,aAA9B,EAA6C,SAASO,OAAtD,GADqB,EAGpBL,KAHoB,GAIpBC,IAJoB,CAIf,WAJe,CAAvB;;AAMAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GAVD;;AAYAF,KAAG,6BAAH,EAAkC,YAAM;AACtC,QAAMY,WAAWX,QACf,uCAAU,QAAV,IAAmB,SAASQ,OAA5B,EAAqC,OAAO,CAAC,GAAD,CAA5C,GADe,CAAjB;;AAIAH,WAAOM,SAASC,QAAT,GAAoBT,KAApB,GAA4BC,IAA5B,CAAiC,SAAjC,CAAP,EAAoDE,EAApD,CAAuDO,EAAvD,CAA0D,IAA1D;AACD,GAND;;AAQAd,KAAG,wBAAH,EAA6B,YAAM;AACjC,QAAMY,WAAWX,QACf,uCAAU,QAAV,IAAmB,SAASQ,OAA5B,EAAqC,cAAc,CAAC,GAAD,CAAnD,GADe,CAAjB;;AAIAH,WAAOM,SAASC,QAAT,GAAoBT,KAApB,GAA4BC,IAA5B,CAAiC,gBAAjC,CAAP,EAA2DE,EAA3D,CAA8DO,EAA9D,CAAiE,IAAjE;AACD,GAND;AAOD,CArCD","file":"Checkbox.test.js","sourcesContent":["import Checkbox from './Checkbox'\n\ndescribe('Checkbox', () => {\n  it('should render without throwing', () => {\n    shallow(<Checkbox />)\n  })\n\n  it('should add className to child', () => {\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(<Checkbox className={testClassName} />)\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(testClassName)\n  })\n})\n\ndescribe('Checkbox.Fieldset', () => {\n  const options = [\n    {label: 'Left', value: 'L'},\n    {label: 'Right', value: 'R'},\n  ]\n\n  it('should render without throwing', () => {\n    shallow(<Checkbox.Fieldset options={options} />)\n  })\n\n  it('should add className to child', () => {\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(\n      <Checkbox.Fieldset className={testClassName} options={options} />\n    )\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(testClassName)\n  })\n\n  it('handles the controlled case', () => {\n    const fieldset = shallow(\n      <Checkbox.Fieldset options={options} value={[\"L\"]} />\n    )\n\n    expect(fieldset.children().first().prop('checked')).to.eq(true)\n  })\n\n  it('handles default values', () => {\n    const fieldset = shallow(\n      <Checkbox.Fieldset options={options} defaultValue={[\"L\"]} />\n    )\n\n    expect(fieldset.children().first().prop('defaultChecked')).to.eq(true)\n  })\n})\n"]}