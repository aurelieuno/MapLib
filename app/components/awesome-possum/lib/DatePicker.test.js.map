{"version":3,"sources":["../src/DatePicker.test.js"],"names":["describe","it","shallow","testClassName","input","find","expect","exists","to","equal","mount","setProps","defaultValue","update","prop","spy","simulate","target","value","called","first","focusSpy","blurSpy","contain","date","day","overrideComponent","Calendar","text"],"mappings":"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","file":"DatePicker.test.js","sourcesContent":["import Calendar from './DatePicker/Calendar'\nimport DatePicker from './DatePicker'\nimport Input from './Input'\nimport sinon from 'sinon'\n\ndescribe('DatePicker', () => {\n  it('should render without throwing', () => {\n    shallow(<DatePicker />)\n  })\n\n  it('should add className to child', () => {\n    const testClassName = '__TEST__'\n\n    const input = shallow(<DatePicker className={testClassName} />).find(`.${testClassName}`)\n\n    expect(input.exists()).to.equal(true)\n  })\n\n  it('should handle external date changes', () => {\n    const input = mount(<DatePicker defaultValue=\"2018-03-12\" />)\n    input.setProps({ defaultValue: '2018-08-05' })\n    input.update()\n\n    expect(input.find(Input).prop('defaultValue')).to.equal('2018-08-05')\n  })\n\n  it('should handle external date changes', () => {\n    const spy = sinon.spy()\n    const input = mount(<DatePicker defaultValue=\"2018-03-12\" onChange={spy} />)\n    input.find('input').simulate('change', { target: { value: '2018-08-05' } })\n    input.update()\n\n    expect(input.find(Input).prop('defaultValue')).to.equal('2018-08-05')\n    expect(spy.called).to.equal(true)\n  })\n\n  it('should translate clicks on calendar cells into changes', () => {\n    const spy = sinon.spy()\n    const input = mount(<DatePicker defaultValue=\"2018-03-12\" isOpen onChange={spy} />)\n    input\n      .find('.rev-Calendar-body-bodyCell')\n      .find('button')\n      .first()\n      .simulate('click')\n\n    expect(input.find(Input).prop('defaultValue')).to.equal('2018-02-25')\n    expect(spy.called).to.equal(true)\n  })\n\n  it('opens the calendar on focus and hides it on blur', () => {\n    const focusSpy = sinon.spy()\n    const blurSpy = sinon.spy()\n\n    const input = mount(<DatePicker onBlur={blurSpy} onFocus={focusSpy} />)\n    input.find('input').simulate('focus')\n    input.update()\n\n    expect(input.find(Calendar).prop('className')).to.contain('rev-Calendar--open')\n    expect(focusSpy.called).to.equal(true)\n    expect(blurSpy.called).to.equal(false)\n\n    input.find('input').simulate('blur')\n    input.update()\n\n    expect(input.find(Calendar).prop('className')).to.contain('rev-Calendar--closed')\n    expect(blurSpy.called).to.equal(true)\n  })\n\n  it('keeps the calendar open when you do not have focus, but the mouse is over', () => {\n    const input = mount(<DatePicker />)\n    input.find('input').simulate('focus')\n    input.find('label').simulate('mouseOver')\n    input.find('input').simulate('blur')\n    input.update()\n\n    expect(input.find(Calendar).prop('className')).to.contain('rev-Calendar--open')\n\n    input.find('label').simulate('mouseOut')\n    input.update()\n    expect(input.find(Calendar).prop('className')).to.contain('rev-Calendar--closed')\n  })\n\n  it('can make items not selectable', () => {\n    const spy = sinon.spy()\n    const input = mount(\n      <DatePicker\n        defaultValue=\"2018-03-12\"\n        isOpen\n        onChange={spy}\n        isSelectable={date => date.day != 1}\n      />\n    )\n\n    expect(input.find('.rev-Calendar-body-bodyCell--unselectable').exists()).to.equal(true)\n\n    input\n      .find('.rev-Calendar-body-bodyCell--unselectable')\n      .find('button')\n      .first()\n      .simulate('click')\n\n    expect(input.find(Input).prop('defaultValue')).to.equal('2018-03-12')\n    expect(spy.called).to.equal(false)\n  })\n\n  it('handles an array of highlights', () => {\n    const input = mount(<DatePicker defaultValue=\"2018-03-12\" highlights={['2018-03-15']} isOpen />)\n\n    expect(input.find('.rev-Calendar-body-bodyCell--highlighted').exists()).to.equal(true)\n  })\n\n  it('handles a hash of highlights', () => {\n    const input = mount(\n      <DatePicker defaultValue=\"2018-03-12\" highlights={{ '2018-03-15': '__TEST__' }} isOpen />\n    )\n\n    expect(input.find('.__TEST__').exists()).to.equal(true)\n  })\n\n  it('handles a highlight function (that returns a class)', () => {\n    const input = mount(\n      <DatePicker\n        defaultValue=\"2018-03-12\"\n        highlights={date => (date.day % 2 == 0 ? '__TEST__' : '')}\n        isOpen\n      />\n    )\n\n    expect(input.find('.__TEST__').exists()).to.equal(true)\n  })\n\n  it('handles a highlight function (that returns a class)', () => {\n    const input = mount(\n      <DatePicker defaultValue=\"2018-03-12\" highlights={date => date.day % 2 == 0} isOpen />\n    )\n\n    expect(input.find('.rev-Calendar-body-bodyCell--highlighted').exists()).to.equal(true)\n  })\n\n  it('does overrides', () => {\n    const overrideComponent = () => <span>AVeryUniqueString</span>\n    const input = mount(\n      <DatePicker overrides={{ [DatePicker.Calendar]: overrideComponent }} isOpen />\n    )\n\n    expect(input.text()).to.contain('AVeryUniqueString')\n  })\n})\n"]}