{"version":3,"sources":["../../src/DatePicker/DateInputBlock.js"],"names":["DateInputBlock","error","className","goodDateInput","generation","overrides","dateFormat","isoValue","formattedValue","name","props","createElement","bind","inputClassName"],"mappings":";;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;6NALA;;AAOA;;;;;;;;;;;;;AAaA,IAAMA,iBAAiB,SAAjBA,cAAiB,OAWjB;AAAA,MAVJC,KAUI,QAVJA,KAUI;AAAA,MATJC,SASI,QATJA,SASI;AAAA,MARJC,aAQI,QARJA,aAQI;AAAA,MAPJC,UAOI,QAPJA,UAOI;AAAA,MANJC,SAMI,QANJA,SAMI;AAAA,MALJC,UAKI,QALJA,UAKI;AAAA,MAJJC,QAII,QAJJA,QAII;AAAA,MAHJC,cAGI,QAHJA,cAGI;AAAA,MAFJC,IAEI,QAFJA,IAEI;AAAA,MADDC,KACC;;AACJ,MAAMC,gBAAgB,oCAA0BC,IAA1B,YAAqCP,SAArC,CAAtB;AACA,MAAMQ,iBAAiB,0BAAWX,SAAX,EAAsB,sBAAtB,EAA8C;AACnE,wBAAoB,CAAC,CAACD,KAD6C;AAEnE,kBAAc,CAAC,CAACA;AAFmD,GAA9C,CAAvB;;AAKA,SACE;AAAA;AAAA;AACE,gDACMS,KADN;AAEE,iBAAWG,cAFb;AAGE,YAAMV,gBAAgB,MAAhB,GAAyB,MAHjC;AAIE,YAAMA,gBAAgBM,IAAhB,GAAuB,IAJ/B;AAKE,oBAAcD;AALhB,OADF;AAQGL,oBAAgB,IAAhB,GACC;AACE,YAAK,QADP;AAEE,YAAMM,IAFR;AAGE,WAAQL,UAAR,eAHF;AAIE,aAAOG,YAAY,EAJrB;AAKE;AALF;AATJ,GADF;AAoBD,CAtCD;;kBAwCeP,c","file":"DateInputBlock.js","sourcesContent":["/** @jsx createElement */\n\nimport classNames from 'classnames'\nimport React from 'react'\nimport Input from '../Input'\nimport createElementWithOverride from '../Utilities/createElementWithOverride'\n\n/**\n * A component which contains the input(s) for a DatePicker. If the DatePicker\n * is a true type=\"date\" input, and we aren't overriding the default format,\n * there will be one input here-- the input[type=\"date\"]. If the browser has bad\n * type=\"date\" support, or we chosen a custom date format, there will be two\n * inputs. One is a visible text input where the user types / calendar sets\n * local formatted date values (e.g. 03/12/2018). The other will be a hidden\n * input which carries the iso date value that a true date field would output.\n * Only the hidden field in this case has a name= attribute, and so it is the\n * only value submitted. This allows the server to expect the same format from\n * the client, whether date inputs are well supported on the client or not.\n * @param {object} props - the props of the DateInputBlock\n */\nconst DateInputBlock = ({\n  error,\n  className,\n  goodDateInput,\n  generation,\n  overrides,\n  dateFormat,\n  isoValue,\n  formattedValue,\n  name,\n  ...props\n}) => {\n  const createElement = createElementWithOverride.bind(this, overrides)\n  const inputClassName = classNames(className, 'rev-DatePicker-input', {\n    'is-invalid-input': !!error,\n    'is-invalid': !!error\n  })\n\n  return (\n    <div>\n      <Input\n        {...props}\n        className={inputClassName}\n        type={goodDateInput ? 'date' : 'text'}\n        name={goodDateInput ? name : null}\n        defaultValue={formattedValue}\n      />\n      {goodDateInput ? null : (\n        <Input\n          type=\"hidden\"\n          name={name}\n          key={`${generation}:trueInput`}\n          value={isoValue || ''}\n          readOnly\n        />\n      )}\n    </div>\n  )\n}\n\nexport default DateInputBlock\n"]}