{"version":3,"sources":["../../src/DatePicker/CalendarDay.js"],"names":["calculateMonthClass","date","currentMonth","modifier","toFormat","calculateSelectionClass","isSelectable","selectedDate","selectable","toISODate","calculateHighlightClass","highlights","dayClickHandler","dateChanger","CalendarDay","overrides","props","monthClass","selectionClass","highlightClass","toLocaleString","year","month","day"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;AAEA;;;;;;;AAOA,SAASA,mBAAT,CAA6BC,IAA7B,EAAmCC,YAAnC,EAAiD;AAC/C,MAAMC,WAAWF,KAAKG,QAAL,CAAc,SAAd,KAA4BF,YAA5B,GAA2C,WAA3C,GAAyD,YAA1E;AACA,0CAAsCC,QAAtC;AACD;;AAED;;;;;;;;AAQA,SAASE,uBAAT,CAAiCC,YAAjC,EAA+CL,IAA/C,EAAqDM,YAArD,EAAmE;AACjE,MAAMC,aAAaF,aAAaL,IAAb,CAAnB;AACA,MAAI,CAACO,UAAL,EAAiB;AACf,WAAO,0CAAP;AACD,GAFD,MAEO,IAAID,gBAAgBN,KAAKQ,SAAL,MAAoBF,YAAxC,EAAsD;AAC3D,WAAO,sCAAP;AACD;AACD,SAAO,EAAP;AACD;;AAED;;;;;;;;AAQA,SAASG,uBAAT,CAAiCT,IAAjC,EAAuCU,UAAvC,EAAmD;AACjD,SACE,6BACEA,cAAc,EADhB,EAEEV,IAFF,EAGE;AAAA,WAAQA,KAAKQ,SAAL,EAAR;AAAA,GAHF,EAIE,yCAJF,KAKK,EANP;AAQD;;AAED;;;;;;;;AAQA,SAASG,eAAT,CAAyBN,YAAzB,EAAuCL,IAAvC,EAA6CY,WAA7C,EAA0D;AACxD,MAAML,aAAaF,aAAaL,IAAb,CAAnB;AACA,MAAIO,UAAJ,EAAgB;AACd,WAAO;AAAA,aAAMK,YAAYZ,KAAKQ,SAAL,EAAZ,CAAN;AAAA,KAAP;AACD;AACD,SAAO,IAAP;AACD;;AAED;;;;;;AAMA,IAAMK,cAAc,SAAdA,WAAc,OASd;AAAA,MARJZ,YAQI,QARJA,YAQI;AAAA,MAPJD,IAOI,QAPJA,IAOI;AAAA,MANJY,WAMI,QANJA,WAMI;AAAA,MALJF,UAKI,QALJA,UAKI;AAAA,MAJJL,YAII,QAJJA,YAII;AAAA,MAHJS,SAGI,QAHJA,SAGI;AAAA,MAFJR,YAEI,QAFJA,YAEI;AAAA,MADDS,KACC;;AACJ,MAAMC,aAAajB,oBAAoBC,IAApB,EAA0BC,YAA1B,CAAnB;AACA,MAAMgB,iBAAiBb,wBAAwBC,YAAxB,EAAsCL,IAAtC,EAA4CM,YAA5C,CAAvB;AACA,MAAMY,iBAAiBT,wBAAwBT,IAAxB,EAA8BU,UAA9B,CAAvB;AACA,MAAMH,aAAaF,aAAaL,IAAb,CAAnB;AACA,SACE;AAAA;AAAA,MAAI,2CAAyCgB,UAAzC,SAAuDC,cAAvD,SAAyEC,cAA7E;AACE;AAAA;AAAA,mBACMH,KADN;AAEE,iBAASJ,gBAAgBN,YAAhB,EAA8BL,IAA9B,EAAoCY,WAApC,CAFX;AAGE,sBAAYZ,KAAKmB,cAAL,CAAoB;AAC9BC,gBAAM,SADwB;AAE9BC,iBAAO,MAFuB;AAG9BC,eAAK;AAHyB,SAApB,CAHd;AAQE,kBAAU,CAACf;AARb;AAUGP,WAAKmB,cAAL,CAAoB,EAAEG,KAAK,SAAP,EAApB;AAVH;AADF,GADF;AAgBD,CA9BD;;kBAgCeT,W","file":"CalendarDay.js","sourcesContent":["import React from 'react'\nimport configMapping from '../Utilities/configMapping'\n\n/**\n * A className depending on whether the date is in the focused month or not.\n * @private\n * @param {DateTime} date - the date in question as a Luxon DateTime\n * @param {string} currentMonth the current month as a string formatted yyyy-MM\n * @returns {string} the className\n */\nfunction calculateMonthClass(date, currentMonth) {\n  const modifier = date.toFormat('yyyy-MM') == currentMonth ? 'thisMonth' : 'otherMonth'\n  return `rev-Calendar-body-bodyCell--${modifier}`\n}\n\n/**\n * A className depending on whether the date is selectable or not.\n * @private\n * @param {Function} isSelectable - a function which returns true id the date is\n *   selectable\n * @param {DateTime} date - a Luxon DateTime for the date in question\n * @param {string} selectedDate - an iso string of the selected date\n */\nfunction calculateSelectionClass(isSelectable, date, selectedDate) {\n  const selectable = isSelectable(date)\n  if (!selectable) {\n    return 'rev-Calendar-body-bodyCell--unselectable'\n  } else if (selectedDate && date.toISODate() == selectedDate) {\n    return 'rev-Calendar-body-bodyCell--selected'\n  }\n  return ''\n}\n\n/**\n * A className for a date depending on whether or not it is 'highlighted.'\n * @private\n * @param {DateTime} date - the date in question as a Luxon DateTime\n * @param {object|Array|Function} highlights a mapping between dates and\n *   highlight classes. If an array, gives a standard --highlighted modifier to\n *   a found date cell.\n */\nfunction calculateHighlightClass(date, highlights) {\n  return (\n    configMapping(\n      highlights || {},\n      date,\n      date => date.toISODate(),\n      'rev-Calendar-body-bodyCell--highlighted'\n    ) || ''\n  )\n}\n\n/**\n * Handles clicks onto the cell. If the cell is selectable, invoke the\n * dateChanger that was passed in. If not, do nothing.\n * @private\n * @param {Function} isSelectable returns true if the date is selectable\n * @param {DateTime} date the date in question\n * @param {Function} dateChanger the handler to invoke if the cell is selectable\n */\nfunction dayClickHandler(isSelectable, date, dateChanger) {\n  const selectable = isSelectable(date)\n  if (selectable) {\n    return _e => dateChanger(date.toISODate())\n  }\n  return null\n}\n\n/**\n * A single day of the calendar. It is a button which takes up the entire table\n * cell. It handles click events, and date dependent formatting (e.g. selected\n * date format, unselectable date format, highlighted date format, etc).\n * @param {object} props the props of the day component\n */\nconst CalendarDay = ({\n  currentMonth,\n  date,\n  dateChanger,\n  highlights,\n  isSelectable,\n  overrides,\n  selectedDate,\n  ...props\n}) => {\n  const monthClass = calculateMonthClass(date, currentMonth)\n  const selectionClass = calculateSelectionClass(isSelectable, date, selectedDate)\n  const highlightClass = calculateHighlightClass(date, highlights)\n  const selectable = isSelectable(date)\n  return (\n    <td className={`rev-Calendar-body-bodyCell ${monthClass} ${selectionClass} ${highlightClass}`}>\n      <button\n        {...props}\n        onClick={dayClickHandler(isSelectable, date, dateChanger)}\n        aria-label={date.toLocaleString({\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric'\n        })}\n        disabled={!selectable}\n      >\n        {date.toLocaleString({ day: 'numeric' })}\n      </button>\n    </td>\n  )\n}\n\nexport default CalendarDay\n"]}