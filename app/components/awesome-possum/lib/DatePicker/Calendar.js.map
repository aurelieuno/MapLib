{"version":3,"sources":["../../src/DatePicker/Calendar.js"],"names":["Calendar","createElement","nextLabel","previousLabel","dateChanger","focuser","isSelectable","props","state","date","asLuxon","selectedDate","nextProps","setState","local","luxon","fromISO","invalid","startOf","weekday","startOfMonth","minus","fromObject","days","n","event","preventDefault","plus","month","className","week","overrides","day","headerDay","highlights","overlay","bind","addMonth","toLocaleString","year","startOfWeekOfStartOfMonth","map","i","toFormat","Component"],"mappings":";;;;;;;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;+eAPA;;AASA;;;;IAIqBA,Q;;;;;;AACnB;;;;wBAI0B;AACxB,UAAMC,gBAAgB,gBAAMA,aAA5B;;AAEA,aAAO;AACLC,mBAAW;AAAA;AAAA;AAAA;AAAA,SADN;AAELC,uBAAe;AAAA;AAAA;AAAA;AAAA,SAFV;AAGLC,qBAAa;AAAA,iBAAM,IAAN;AAAA,SAHR;AAILC,iBAAS;AAAA,iBAAM,IAAN;AAAA,SAJJ;AAKLC,sBAAc;AAAA,iBAAM,IAAN;AAAA;AALT,OAAP;AAOD;;AAED;;;;;;;;AAKA,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA,oHACXA,KADW;;AAEjB,UAAKC,KAAL,GAAa;AACXC,YAAM,MAAKC,OAAL,CAAa,MAAKH,KAAL,CAAWI,YAAxB;AADK,KAAb;AAFiB;AAKlB;;AAED;;;;;;;;;;;8CAO0BC,S,EAAW;AACnC,UAAIA,UAAUD,YAAV,IAA0B,KAAKJ,KAAL,CAAWI,YAAzC,EAAuD;AACrD,aAAKE,QAAL,CAAc,EAAEJ,MAAM,KAAKC,OAAL,CAAaE,UAAUD,YAAvB,CAAR,EAAd;AACD;AACF;;AAED;;;;;;;;;4BAMQF,I,EAAM;AACZ,UAAI,CAACA,IAAL,EAAW;AACT,eAAO,gBAASK,KAAT,EAAP;AACD;;AAED,UAAMC,QAAQ,gBAASC,OAAT,CAAiBP,IAAjB,CAAd;AACA,UAAIM,MAAME,OAAV,EAAmB;AACjB,eAAO,gBAASH,KAAT,EAAP;AACD;AACD,aAAOC,KAAP;AACD;;AAED;;;;;;;;;mCAMe;AACb,aAAO,KAAKP,KAAL,CAAWC,IAAX,CAAgBS,OAAhB,CAAwB,OAAxB,CAAP;AACD;;AAED;;;;;;;;;;;;gDAS4B;AAC1B,UAAMC,UAAU,KAAKC,YAAL,GAAoBD,OAApB,GAA8B,CAA9C;AACA,aAAO,KAAKC,YAAL,GAAoBC,KAApB,CAA0B,gBAASC,UAAT,CAAoB,EAAEC,MAAMJ,OAAR,EAApB,CAA1B,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;6BAaSK,C,EAAGC,K,EAAO;AACjBA,YAAMC,cAAN;AACA,WAAKb,QAAL,CAAc;AACZJ,cAAM,KAAKW,YAAL,GAAoBO,IAApB,CAAyB,gBAASL,UAAT,CAAoB,EAAEM,OAAOJ,CAAT,EAApB,CAAzB;AADM,OAAd;AAGA,UAAI,KAAKjB,KAAL,CAAWF,OAAf,EAAwB;AACtB,aAAKE,KAAL,CAAWF,OAAX;AACD;AACF;;;6BAEQ;AAAA;;AAAA,mBAgBH,KAAKE,KAhBF;AAAA,UAELsB,SAFK,UAELA,SAFK;AAAA,UAGLC,IAHK,UAGLA,IAHK;AAAA,UAILC,SAJK,UAILA,SAJK;AAAA,UAKLC,GALK,UAKLA,GALK;AAAA,UAML3B,OANK,UAMLA,OANK;AAAA,UAOL4B,SAPK,UAOLA,SAPK;AAAA,UAQL3B,YARK,UAQLA,YARK;AAAA,UASLF,WATK,UASLA,WATK;AAAA,UAULO,YAVK,UAULA,YAVK;AAAA,UAWLuB,UAXK,UAWLA,UAXK;AAAA,UAYLhC,SAZK,UAYLA,SAZK;AAAA,UAaLC,aAbK,UAaLA,aAbK;AAAA,UAcLgC,OAdK,UAcLA,OAdK;AAAA,UAeF5B,KAfE;;AAiBP,UAAMN,gBAAgB,oCAA0BmC,IAA1B,CAA+B,IAA/B,EAAqCL,SAArC,CAAtB;;AAEA,aACE;AAAA;AAAA,qBAASxB,KAAT,IAAgB,8BAA2B4B,UAAU,uBAAV,GAAoC,EAA/D,UAAqEN,SAArF;AACE;AAAA;AAAA;AACE;AAAA,2BAAM,MAAN;AAAA,cAAa,WAAU,qBAAvB;AACE;AAAA;AAAA;AACE,yBAAS,KAAKQ,QAAL,CAAcD,IAAd,CAAmB,IAAnB,EAAyB,CAAC,CAA1B,CADX;AAEE,2BAAU,iEAFZ;AAGE,8BAAW;AAHb;AAKGjC;AALH,aADF;AAQE;AAAA;AAAA,gBAAM,WAAU,2BAAhB;AACG,mBAAKK,KAAL,CAAWC,IAAX,CAAgB6B,cAAhB,CAA+B;AAC9BV,uBAAO,OADuB;AAE9BW,sBAAM;AAFwB,eAA/B;AADH,aARF;AAcE;AAAA;AAAA;AACE,yBAAS,KAAKF,QAAL,CAAcD,IAAd,CAAmB,IAAnB,EAAyB,CAAzB,CADX;AAEE,2BAAU,6DAFZ;AAGE,8BAAW;AAHb;AAKGlC;AALH;AAdF,WADF;AAuBE;AAAA;AAAA,cAAO,WAAU,mBAAjB;AACE;AACE,wBAAU,KAAKsC,yBAAL,EADZ;AAEE,yBAAWT,SAFb;AAGE,yBAAWE;AAHb,cADF;AAME;AAAA;AAAA;AACG,eAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAe,EAAf,EAAmBQ,GAAnB,CAAuB,aAAK;AAC3B,uBACE,sDACMX,IADN;AAEE,uBAAKE,GAFP;AAGE,4BAAU,OAAKQ,yBAAL,GAAiCb,IAAjC,CAAsC,EAAEJ,MAAMmB,CAAR,EAAtC,CAHZ;AAIE,gCAAc,OAAKlC,KAAL,CAAWC,IAAX,CAAgBkC,QAAhB,CAAyB,SAAzB,CAJhB;AAKE,gCAAcrC,YALhB;AAME,+BAAaF,WANf;AAOE,gCAAcO,YAPhB;AAQE,8BAAYuB,UARd;AASE,uBAAKQ;AATP,mBADF;AAaD,eAdA;AADH;AANF;AAvBF;AADF,OADF;AAoDD;;;;EAlLmC,gBAAME,S;;kBAAvB5C,Q","file":"Calendar.js","sourcesContent":["/** @jsx createElement */\n\nimport Card from '../Card'\nimport { DateTime, Duration } from 'luxon'\nimport React from 'react'\nimport CalendarHeaderRow from './CalendarHeaderRow'\nimport CalendarWeekRow from './CalendarWeekRow'\nimport createElementWithOverride from '../Utilities/createElementWithOverride'\n\n/**\n * A component representing a Calendar for a given focus month (& including the\n * leading days of the first week and trailing days of the last week).\n */\nexport default class Calendar extends React.Component {\n  /**\n   * The default values for props of this component\n   * @return {object} the default value object\n   */\n  static get defaultProps() {\n    const createElement = React.createElement\n\n    return {\n      nextLabel: <span>&rsaquo;</span>,\n      previousLabel: <span>&lsaquo;</span>,\n      dateChanger: () => null,\n      focuser: () => null,\n      isSelectable: () => true\n    }\n  }\n\n  /**\n   * Creates a Calendar. Sets state.date to a Luxon DateTime based on the\n   * selectedDate prop.\n   * @param {*} props\n   */\n  constructor(props) {\n    super(props)\n    this.state = {\n      date: this.asLuxon(this.props.selectedDate)\n    }\n  }\n\n  /**\n   * Update state when props change. In particular, if we receive a different\n   * `selectedDate` prop from up the hierarchy, set state.date to a new Luxon\n   * DateTime appropriately (in order to force the calendar to focus on the new\n   * date).\n   * @param {*} nextProps\n   */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.selectedDate != this.props.selectedDate) {\n      this.setState({ date: this.asLuxon(nextProps.selectedDate) })\n    }\n  }\n\n  /**\n   * Convert an iso date string to a Luxon DateTime. If iso date is blank / null,\n   * or invalid (e.g. 2018-06-66), return the local current date instead.\n   * @param {string} date - the date to convert, as either an iso date, or a\n   *   blank / null\n   */\n  asLuxon(date) {\n    if (!date) {\n      return DateTime.local()\n    }\n\n    const luxon = DateTime.fromISO(date)\n    if (luxon.invalid) {\n      return DateTime.local()\n    }\n    return luxon\n  }\n\n  /**\n   * The start of the month of that the current focus date is in (e.g. if the\n   * input is filled with 2018-08-05 then this value is 2018-08-1).\n   * @returns {DateTime} - a Luxon DateTime represented the first day of the\n   *   month in question.\n   */\n  startOfMonth() {\n    return this.state.date.startOf('month')\n  }\n\n  /**\n   * Returns the nearest Sunday falling on or before the start of the month.\n   * This is the first day of the first row of the calendar display. Note that\n   * this date is either equal to startOfMonth (if the month starts on a Sunday)\n   * or in the previous month (if the month starts on a different day of the\n   * week).\n   * @returns {DateTime} - a Luxon DateTime representing the Sunday when the first\n   *   week of the focus month starts.\n   */\n  startOfWeekOfStartOfMonth() {\n    const weekday = this.startOfMonth().weekday % 7\n    return this.startOfMonth().minus(Duration.fromObject({ days: weekday }))\n  }\n\n  /**\n   * Move the focus month up n months (or back |n| months if n is negative).\n   * It moves it to n months from startOfMonth to handle advancing between\n   * months with different numbers of days (2018-01-31 + 1 month in Luxon =\n   * 2018-03-03). We actually want Jan -> Feb -> Mar which only works if we do\n   * (2018-01-31).startOfMonth() + 1month = 2018-02-01.\n   *\n   * This function does not change the date in the input (only calendar display,\n   * so we can get away with using the first of the month like this.\n   * @param {int} n\n   * @param {Event} event - the event that caused this handler to be invoked\n   *   (e.g. the click event from the next or previous button on the calendar)\n   */\n  addMonth(n, event) {\n    event.preventDefault()\n    this.setState({\n      date: this.startOfMonth().plus(Duration.fromObject({ month: n }))\n    })\n    if (this.props.focuser) {\n      this.props.focuser()\n    }\n  }\n\n  render() {\n    const {\n      className,\n      week,\n      overrides,\n      day,\n      focuser,\n      headerDay,\n      isSelectable,\n      dateChanger,\n      selectedDate,\n      highlights,\n      nextLabel,\n      previousLabel,\n      overlay,\n      ...props\n    } = this.props\n    const createElement = createElementWithOverride.bind(this, overrides)\n\n    return (\n      <div {...props} className={`rev-Calendar ${overlay ? 'rev-Calendar--overlay' : ''} ${className}`}>\n        <Card>\n          <Card.Header className=\"rev-Calendar-header\">\n            <button\n              onClick={this.addMonth.bind(this, -1)}\n              className=\"rev-Calendar-header-button rev-Calendar-header-button--previous\"\n              aria-label=\"Previous Month\"\n            >\n              {previousLabel}\n            </button>\n            <span className=\"rev-Calendar-header-label\">\n              {this.state.date.toLocaleString({\n                month: 'short',\n                year: 'numeric'\n              })}\n            </span>\n            <button\n              onClick={this.addMonth.bind(this, 1)}\n              className=\"rev-Calendar-header-button rev-Calendar-header-button--next\"\n              aria-label=\"Next Month\"\n            >\n              {nextLabel}\n            </button>\n          </Card.Header>\n          <table className=\"rev-Calendar-body\">\n            <CalendarHeaderRow\n              firstDay={this.startOfWeekOfStartOfMonth()}\n              overrides={overrides}\n              headerDay={headerDay}\n            />\n            <tbody>\n              {[0, 7, 14, 21, 28].map(i => {\n                return (\n                  <CalendarWeekRow\n                    {...week}\n                    day={day}\n                    firstDay={this.startOfWeekOfStartOfMonth().plus({ days: i })}\n                    currentMonth={this.state.date.toFormat('yyyy-MM')}\n                    isSelectable={isSelectable}\n                    dateChanger={dateChanger}\n                    selectedDate={selectedDate}\n                    highlights={highlights}\n                    key={i}\n                  />\n                )\n              })}\n            </tbody>\n          </table>\n        </Card>\n      </div>\n    )\n  }\n}\n"]}