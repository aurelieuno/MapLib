{"version":3,"sources":["../src/Visibility.js"],"names":["CLASS_NAMES","showForSmall","showForMedium","showForLarge","showForXlarge","showForXxlarge","showForSmallOnly","showForMediumOnly","showForLargeOnly","showForXlargeOnly","showForXxlargeOnly","hideForSmall","hideForMedium","hideForLarge","hideForXlarge","hideForXxlarge","hideForSmallOnly","hideForMediumOnly","hideForLargeOnly","hideForXlargeOnly","hideForXxlargeOnly","hiddenForSmall","hiddenForMedium","hiddenForLarge","hiddenForXlarge","hiddenForXxlarge","hiddenForSmallOnly","hiddenForMediumOnly","hiddenForLargeOnly","hiddenForXlargeOnly","hiddenForXxlargeOnly","PROP_TYPES","children","node","Object","keys","forEach","key","bool","Visibility","classNamesList","props","className","propName","push","newClassName","isValidElement","propTypes"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,cAAc;AAClBC,gBAAc,eADI;AAElBC,iBAAe,gBAFG;AAGlBC,gBAAc,eAHI;AAIlBC,iBAAe,gBAJG;AAKlBC,kBAAgB,iBALE;;AAOlBC,oBAAkB,iBAPA;AAQlBC,qBAAmB,kBARD;AASlBC,oBAAkB,iBATA;AAUlBC,qBAAmB,kBAVD;AAWlBC,sBAAoB,mBAXF;;AAalBC,gBAAc,MAbI;AAclBC,iBAAe,gBAdG;AAelBC,gBAAc,eAfI;AAgBlBC,iBAAe,gBAhBG;AAiBlBC,kBAAgB,iBAjBE;;AAmBlBC,oBAAkB,iBAnBA;AAoBlBC,qBAAmB,kBApBD;AAqBlBC,oBAAkB,iBArBA;AAsBlBC,qBAAmB,kBAtBD;AAuBlBC,sBAAoB,iBAvBF;;AAyBlBC,kBAAgB,QAzBE;AA0BlBC,mBAAiB,kBA1BC;AA2BlBC,kBAAgB,iBA3BE;AA4BlBC,mBAAiB,kBA5BC;AA6BlBC,oBAAkB,mBA7BA;;AA+BlBC,sBAAoB,mBA/BF;AAgClBC,uBAAqB,oBAhCH;AAiClBC,sBAAoB,mBAjCF;AAkClBC,uBAAqB,oBAlCH;AAmClBC,wBAAsB;AAnCJ,CAApB;;AAsCA,IAAMC,aAAa;AACjBC,YAAU,oBAAUC;AADH,CAAnB;AAGAC,OAAOC,IAAP,CAAYnC,WAAZ,EAAyBoC,OAAzB,CAAiC;AAAA,SAAOL,WAAWM,GAAX,IAAkB,oBAAUC,IAAnC;AAAA,CAAjC;;IAEqBC,U;;;;;;;;;;;6BAIV;AACP,UAAMC,iBAAiB,CAAC,KAAKC,KAAL,CAAWC,SAAZ,CAAvB;AACAR,aAAOC,IAAP,CAAY,KAAKM,KAAjB,EAAwBL,OAAxB,CAAgC,UAACO,QAAD,EAAc;AAC5C,YAAMD,YAAY1C,YAAY2C,QAAZ,CAAlB;AACA,YAAGD,SAAH,EAAc;AACZF,yBAAeI,IAAf,CAAoBF,SAApB;AACD;AACF,OALD;;AAOA,UAAMG,eAAe,0BAAWL,cAAX,CAArB;AACA,UAAI,gBAAMM,cAAN,CAAqB,KAAKL,KAAL,CAAWT,QAAhC,CAAJ,EAA+C;AAC7C,eAAO,yBAAa,KAAKS,KAAL,CAAWT,QAAxB,EAAkC,EAACU,WAAWG,YAAZ,EAAlC,CAAP;AACD;;AAED,aAAO;AAAA;AAAA,UAAM,WAAWA,YAAjB;AAAgC,aAAKJ,KAAL,CAAWT;AAA3C,OAAP;AACD;;;;;;AAnBkBO,U,CAEZQ,S,GAAYhB,U;kBAFAQ,U","file":"Visibility.js","sourcesContent":["import React, {Component, cloneElement} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nconst CLASS_NAMES = {\n  showForSmall: 'Show--smallUp',\n  showForMedium: 'Show--mediumUp',\n  showForLarge: 'Show--largeUp',\n  showForXlarge: 'Show--xlargeUp',\n  showForXxlarge: 'Show--xxlargeUp',\n\n  showForSmallOnly: 'Show--smallOnly',\n  showForMediumOnly: 'Show--mediumOnly',\n  showForLargeOnly: 'Show--largeOnly',\n  showForXlargeOnly: 'Show--xlargeOnly',\n  showForXxlargeOnly: 'Show--xxlargeOnly',\n\n  hideForSmall: 'Hide',\n  hideForMedium: 'Hide--mediumUp',\n  hideForLarge: 'Hide--largeUp',\n  hideForXlarge: 'Hide--xlargeUp',\n  hideForXxlarge: 'Hide--xxlargeUp',\n\n  hideForSmallOnly: 'Hide--smallOnly',\n  hideForMediumOnly: 'Hide--mediumOnly',\n  hideForLargeOnly: 'Hide--largeOnly',\n  hideForXlargeOnly: 'Hide--xlargeOnly',\n  hideForXxlargeOnly: 'Hide--xxlargeUp',\n\n  hiddenForSmall: 'Hidden',\n  hiddenForMedium: 'Hidden--mediumUp',\n  hiddenForLarge: 'Hidden--largeUp',\n  hiddenForXlarge: 'Hidden--xlargeUp',\n  hiddenForXxlarge: 'Hidden--xxlargeUp',\n\n  hiddenForSmallOnly: 'Hidden--smallOnly',\n  hiddenForMediumOnly: 'Hidden--mediumOnly',\n  hiddenForLargeOnly: 'Hidden--largeOnly',\n  hiddenForXlargeOnly: 'Hidden--xlargeOnly',\n  hiddenForXxlargeOnly: 'Hidden--xxlargeUp',\n}\n\nconst PROP_TYPES = {\n  children: PropTypes.node,\n}\nObject.keys(CLASS_NAMES).forEach(key => PROP_TYPES[key] = PropTypes.bool)\n\nexport default class Visibility extends Component {\n\n  static propTypes = PROP_TYPES;\n\n  render() {\n    const classNamesList = [this.props.className]\n    Object.keys(this.props).forEach((propName) => {\n      const className = CLASS_NAMES[propName]\n      if(className) {\n        classNamesList.push(className)\n      }\n    })\n\n    const newClassName = classNames(classNamesList)\n    if (React.isValidElement(this.props.children)) {\n      return cloneElement(this.props.children, {className: newClassName})\n    }\n\n    return <span className={newClassName}>{this.props.children}</span>\n  }\n}\n"]}