{"version":3,"sources":["../src/Col.test.js"],"names":["describe","it","shallow","inherentClassName","testClassName","childClassName","first","prop","expect","to","contain","propToClass","small","medium","large","smallOffset","mediumOffset","largeOffset","smallPush","mediumPush","largePush","smallPull","mediumPull","largePull","smallOrder","mediumOrder","largeOrder","key","value","props","col"],"mappings":";;AAAA;;;;;;;;AAEAA,SAAS,KAAT,EAAgB,YAAM;AACpBC,KAAG,gCAAH,EAAqC,YAAM;AACzCC,YAAQ,wCAAR;AACD,GAFD;;AAIAD,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAME,oBAAoB,SAA1B;AACA,QAAMC,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiBH,QAAQ,qCAAK,WAAWE,aAAhB,GAAR,EACpBE,KADoB,GAEpBC,IAFoB,CAEf,WAFe,CAAvB;;AAIAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCP,iBAAlC;AACAK,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GAVD;;AAYAH,KAAG,6BAAH,EAAkC,YAAM;AACtC,QAAMU,cAAc;AAClBC,aAAO,OADW;AAElBC,cAAQ,QAFU;AAGlBC,aAAO,OAHW;AAIlBC,mBAAa,cAJK;AAKlBC,oBAAc,eALI;AAMlBC,mBAAa,cANK;AAOlBC,iBAAW,YAPO;AAQlBC,kBAAY,aARM;AASlBC,iBAAW,YATO;AAUlBC,iBAAW,YAVO;AAWlBC,kBAAY,aAXM;AAYlBC,iBAAW,YAZO;AAalBC,kBAAY,aAbM;AAclBC,mBAAa,cAdK;AAelBC,kBAAY;AAfM,KAApB;;AAkBA,SAAK,IAAIC,GAAT,IAAgBhB,WAAhB,EAA6B;AAC3B,UAAMiB,QAAQjB,YAAYgB,GAAZ,CAAd;AACA,UAAME,4BAAUF,GAAV,EAAgB,CAAhB,CAAN;AACA,UAAMG,MAAM5B,QAAQ,mCAAS2B,KAAT,CAAR,CAAZ;AACArB,aAAOsB,IAAIvB,IAAJ,CAAS,WAAT,CAAP,EAA8BE,EAA9B,CAAiCC,OAAjC,CAAyCkB,KAAzC;AACD;AACF,GAzBD;;AA2BA3B,KAAG,uBAAH,EAA4B,YAAM;AAChC,QAAM6B,MAAM5B,QAAQ,qCAAK,mBAAL,GAAR,CAAZ;AACAM,WAAOsB,IAAIvB,IAAJ,CAAS,WAAT,CAAP,EAA8BE,EAA9B,CAAiCC,OAAjC,CAAyC,gBAAzC;AACD,GAHD;AAID,CAhDD","file":"Col.test.js","sourcesContent":["import Col from './Col'\n\ndescribe('Col', () => {\n  it('should render without throwing', () => {\n    shallow(<Col />)\n  })\n\n  it('should add className to child', () => {\n    const inherentClassName = 'columns'\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(<Col className={testClassName} />)\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(inherentClassName)\n    expect(childClassName).to.contain(testClassName)\n  })\n\n  it('handles column number props', () => {\n    const propToClass = {\n      small: 'small',\n      medium: 'medium',\n      large: 'large',\n      smallOffset: 'small-offset',\n      mediumOffset: 'medium-offset',\n      largeOffset: 'large-offset',\n      smallPush: 'small-push',\n      mediumPush: 'medium-push',\n      largePush: 'large-push',\n      smallPull: 'small-pull',\n      mediumPull: 'medium-pull',\n      largePull: 'large-pull',\n      smallOrder: 'small-order',\n      mediumOrder: 'medium-order',\n      largeOrder: 'large-order',\n    }\n\n    for (let key in propToClass) {\n      const value = propToClass[key]\n      const props = {[key]: 1}\n      const col = shallow(<Col {...props} />)\n      expect(col.prop('className')).to.contain(value)\n    }\n  })\n\n  it('handles boolean props', () => {\n    const col = shallow(<Col smallCentered />)\n    expect(col.prop('className')).to.contain('small-centered')\n  })\n})\n"]}