{"version":3,"sources":["../src/DatePicker.js"],"names":["goodDateInput","window","el","document","createElement","type","value","UncontrolledDatePicker","isSelectable","props","dateFormat","state","isOpen","focused","valuesFromProps","generation","mousedIn","nextProps","setState","valuesFromIso","defaultValue","iso","isoValue","formattedValue","isoToFormatted","fromISO","toFormat","event","asISO","fromFormat","target","toISODate","onChange","date","nativeInput","fireChangeHandler","refocus","Event","dispatchEvent","navigator","test","userAgent","onFocus","onBlur","focus","error","help","label","highlights","overrides","calendar","week","day","headerDay","overlay","bind","nativeClass","useNativePicker","mouseIn","mouseOut","blur","input","dateChanger","calendarOpened","disabled","useCalendarOnMobile","Component","propTypes","node","oneOfType","arrayOf","string","objectOf","func","bool","instanceOf","object","DateInputBlock","Calendar"],"mappings":"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","file":"DatePicker.js","sourcesContent":["/** @jsx createElement */\n\nimport React from 'react'\nimport PropTypes from 'prop-types';\nimport Calendar from './DatePicker/Calendar'\nimport DateInputBlock from './DatePicker/DateInputBlock'\nimport InputHelpText from './InputHelpText'\nimport InputErrors from './InputErrors'\nimport createElementWithOverride from './Utilities/createElementWithOverride'\nimport { DateTime } from 'luxon'\n\n/**\n * Return true if date type inputs are well supported on this platform\n * @return {boolean} true is date type inputs are well supported, false otherwise\n */\nfunction goodDateInput() {\n  if (typeof window === 'undefined') {\n    return true\n  } else {\n    const el = document.createElement('input')\n    el.type = 'date'\n    el.value = '!)'\n    return el.value == ''\n  }\n}\n\n/** A DatePicker component containing inputs and a calendar. */\nclass UncontrolledDatePicker extends React.Component {\n  /**\n   * The default values for props of this component\n   * @return {object} the default value object\n   */\n  static get defaultProps() {\n    const createElement = React.createElement\n\n    return {\n      isSelectable: () => true\n    }\n  }\n\n  /**\n   * Create a datepicker. Determines if we can use browser native date type input\n   * or if we need to fall back to a text type input (based on support and if a\n   * non-standard format is specified.)\n   * @param {object} props\n   */\n  constructor(props) {\n    super(props)\n    // On platforms with poor date input support, or when non-standard format is\n    // specified, we have to fall back to a text type input\n    this.goodDateInput = goodDateInput() && !this.props.dateFormat\n    this.state = {\n      isOpen: this.props.isOpen || false,\n      focused: false,\n      // Handles setting both the iso and 'local' format versions of the date\n      // into state. We do this so that we can always accept ISO dates from\n      // up the hierarchy, but also handle accepting change events from unchecked\n      // oddly formatted text inputs\n      ...this.valuesFromProps(props),\n      // Generation exists to force the inputs in the component to accept the\n      // new value when we click the calendar\n      generation: 0,\n      mousedIn: false\n    }\n  }\n\n  /**\n   * Handle updated props from up the chain. In particular, if we receive a new\n   * date from up the hierarchy, we want to reset the inputs and the calendar to\n   * that value.\n   * @param {object} nextProps\n   */\n  componentWillReceiveProps(nextProps) {\n    this.setState(this.valuesFromProps(nextProps))\n  }\n\n  /**\n   * Find the date value from the props, and convert it to two values-- an iso\n   * date and a 'local' format date version (so we can deal with poorly formatted\n   * text inputs intelligently).\n   * @param {object} props\n   * @return {object} an object with two keys: isoValue & formattedValue\n   */\n  valuesFromProps(props) {\n    return this.valuesFromIso(props.defaultValue || props.value)\n  }\n\n  /**\n   * Take an ISO formatted date and turn it into an object with iso and local\n   * format date.\n   * @param {string} iso - an iso format date\n   * @return {object} an object with two keys: isoValue & formattedValue\n   */\n  valuesFromIso(iso) {\n    return {\n      isoValue: iso,\n      formattedValue: this.isoToFormatted(iso)\n    }\n  }\n\n  /**\n   * Take an iso formatted date and put it into this picker's format\n   * @param {string} iso - an iso format date\n   * @return {string} a date formatted according to the format of this date picker\n   */\n  isoToFormatted(iso) {\n    if (!iso) {\n      return ''\n    }\n    return DateTime.fromISO(iso).toFormat(this.dateFormat)\n  }\n\n  /**\n   * Process change events from the input by updating the isoValue & formattedValue\n   * of this component. Will call down to an onChange handler passed in.\n   * @param {Event} event - the change event fired from the input\n   */\n  onChange(event) {\n    // Take whatever format the input gave us, and turn it into an ISO date string\n    const asISO = DateTime.fromFormat(event.target.value, this.dateFormat).toISODate()\n\n    if (this.props.onChange) {\n      // Call into an onChange we got as props\n      this.props.onChange(event)\n    }\n\n    // Update isoValue & formattedValue from the ISO we built\n    this.setState(this.valuesFromIso(asISO))\n  }\n\n  /**\n   * Return the date format the component is using. Will be yyyy-MM-dd if we are\n   * using a well supported date input (without custom format). If we have fallen\n   * back to text field due to custom format or bad support, this will be the\n   * custom format (defaulting to 'MM/dd/yyyy').\n   * @return {string} the date format in use by the component\n   */\n  get dateFormat() {\n    // TODO: detect locale default format string and use that instead of\n    //   hardcoded 'MM/dd/yyyy'\n    return this.goodDateInput ? 'yyyy-MM-dd' : this.props.dateFormat || 'MM/dd/yyyy'\n  }\n\n  /**\n   * Invoked by the calendar to tell the date picker to update the inputs (onClick\n   * of the calendar buttons).\n   * @param {string} date - the new date, in the format yyyy-MM-dd\n   */\n  dateChanger(date) {\n    // Update isoValue & formattedValue based on the date value (which is an iso\n    // date)\n    this.setState(this.valuesFromIso(date))\n    // Update the native input value with the formatted version of the new date\n    // (this prevents the native input value from sticking with a hand-typed\n    // input value after the button is clicked in certain situations)\n    // It also sets us up to fire off a synthetic change event that looks just\n    // like change event from a typed input (so external change handlers are\n    // properly) invoked\n    this.nativeInput.value = this.isoToFormatted(date)\n\n    this.fireChangeHandler()\n\n    // Force the input to be focused again (so that we don't immediately close\n    // the calendar because the button click makes us not focused on the input)\n    this.refocus()\n  }\n\n  /**\n   * Create a synthetic change event and send it into the change handlers as if\n   * the user had typed the new value. This makes typed input and calendar button\n   * clicks fire off the same handlers.\n   */\n  fireChangeHandler() {\n    const event = new Event('change')\n    this.nativeInput.dispatchEvent(event)\n    this.onChange(event)\n  }\n\n  /**\n   * Test whether we're on android or iphone. In that case, we hide the calendar\n   * (unless we specify the useCalendarOnMobile prop to force it). This is because\n   * those platforms have native inputs for dates which are much better for touch\n   * than what we can do with a calendar.\n   * @return {boolean} - true if on iOS or Android\n   */\n  useNativePicker() {\n    return typeof navigator !== 'undefined' &&\n           /Android|iPhone|iPad|iPod/i.test(navigator.userAgent)\n  }\n\n  /**\n   * Track when the mouse cursor is over the component, so that we can not\n   * immediately close the calendar when we lose focus-- which happens if you\n   * click the calendar buttons.\n   */\n  mouseIn() {\n    this.setState({ mousedIn: true })\n  }\n\n  /**\n   * Track when the mouse is no longer over the component, which means that it\n   * is safe to close the calendar if we lose focus, for example, because the\n   * focus has moved to the next element.\n   */\n  mouseOut() {\n    this.setState({ mousedIn: false, isOpen: this.state.focused })\n  }\n\n  /**\n   * Mark the input as in focus. Used to determine whether the calendar should\n   * be open or not.\n   * @param {Event} event - the focus event\n   */\n  focus(event) {\n    if (this.props.onFocus) {\n      this.props.onFocus(event)\n    }\n    this.setState({ focused: true, isOpen: true })\n  }\n\n  /**\n   * Mark the input as out of focus. Used to determine whether the calendar should\n   * be open or not.\n   * @param {Event} event - the focus event\n   */\n  blur(event) {\n    if (this.props.onBlur) {\n      this.props.onBlur(event)\n    }\n    this.setState({ focused: false, isOpen: this.state.mousedIn })\n  }\n\n  /**\n   * Force the input back into focus. Used when calendar buttons are clicked, so\n   * that the input stays in focus and we don't close the calendar.\n   */\n  refocus() {\n    if (this.nativeInput) {\n      this.nativeInput.focus()\n    }\n    this.focus()\n  }\n\n  /**\n   * Returns true if the calendar should be opened, which is if:\n   * - isOpen prop or state is set to true (state is true if the input is in\n   *   focus or moused over)\n   * - AND the input is not disabled\n   * - AND we're not using the iOS / Android native picker (i.e. we're not on\n   *   those platform OR we used props.useCalendarOnMobile to force non-native\n   *   input)\n   * @returns {boolean} - true if the calendar should be open\n   */\n  get calendarOpened() {\n    return (this.state.isOpen || this.props.isOpen) &&\n           !this.props.disabled &&\n           (!this.useNativePicker() || this.props.useCalendarOnMobile)\n  }\n\n  render() {\n    let {\n      error,\n      help,\n      label,\n      highlights,\n      isOpen,\n      overrides,\n      isSelectable,\n      calendar,\n      week,\n      day,\n      headerDay,\n      overlay,\n      ...props\n    } = this.props\n\n    const createElement = createElementWithOverride.bind(this, overrides)\n\n    const nativeClass = this.useNativePicker() ? 'rev-DatePicker--native' : 'rev-DatePicker--custom'\n\n    return (\n      <label\n        className={`rev-DatePicker rev-InputLabel ${nativeClass}`}\n        onMouseOver={this.mouseIn.bind(this)}\n        onMouseOut={this.mouseOut.bind(this)}\n      >\n        {label}\n        <DateInputBlock\n          {...props}\n          error={error}\n          isoValue={this.state.isoValue}\n          formattedValue={this.state.formattedValue}\n          goodDateInput={this.goodDateInput}\n          onFocus={this.focus.bind(this)}\n          onBlur={this.blur.bind(this)}\n          onChange={this.onChange.bind(this)}\n          generation={this.state.generation}\n          inputRef={input => (this.nativeInput = input)}\n          overrides={overrides}\n        />\n        <InputHelpText>{help}</InputHelpText>\n        <InputErrors>{error}</InputErrors>\n        <Calendar\n          selectedDate={this.state.isoValue}\n          dateChanger={this.dateChanger.bind(this)}\n          focuser={this.refocus.bind(this)}\n          overrides={overrides}\n          isSelectable={isSelectable}\n          week={week}\n          highlights={highlights}\n          overlay={overlay}\n          {...calendar}\n          day={day}\n          headerDay={headerDay}\n          className={this.calendarOpened ? 'rev-Calendar--open' : 'rev-Calendar--closed'}\n        />\n      </label>\n    )\n  }\n}\n\nUncontrolledDatePicker.propTypes = {\n  error: PropTypes.node,\n  help: PropTypes.node,\n  label: PropTypes.node,\n  highlights: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.objectOf(PropTypes.string),\n    PropTypes.func,\n  ]),\n  isOpen: PropTypes.bool,\n  overrides: PropTypes.objectOf(\n    PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.instanceOf(React.Component),\n    ]),\n  ),\n  isSelectable: PropTypes.func,\n  calendar: PropTypes.object,\n  week: PropTypes.object,\n  day: PropTypes.object,\n  headerDay: PropTypes.object,\n  useCalendarOnMobile: PropTypes.bool,\n}\n\nUncontrolledDatePicker.DateInputBlock = DateInputBlock\nUncontrolledDatePicker.Calendar = Calendar\nexport {Calendar, DateInputBlock};\nexport default UncontrolledDatePicker\n"]}