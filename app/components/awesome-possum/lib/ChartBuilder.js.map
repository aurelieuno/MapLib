{"version":3,"sources":["../src/ChartBuilder.js"],"names":["REV_CHART_SPEC","bar","defaultOptions","scaleBeginAtZero","scaleShowGridLines","scaleGridLineColor","scaleGridLineWidth","scaleShowHorizontalLine","scaleShowVerticalLine","barShowStroke","barStrokeWidth","barValueSpacing","barDatasetSpacing","pointHitDetectionRadius","datasetStroke","datasetStrokeWidth","datasetFill","donut","segmentShowStroke","segmentStrokeColor","segmentStrokeWidth","percentageInnerCutout","animationSteps","animationEasing","animateRotate","animateScale","line","bezierCurve","bezierCurveTension","pointDot","pointDotRadius","pointDotStrokeWidth","pie","radar","scaleShowLine","angleShowLineOut","scaleShowLabels","angleLineColor","angleLineWidth","pointLabelFontFamily","pointLabelFontStyle","pointLabelFontSize","pointLabelFontColor","ChartBuilder","_chart","Error","ctx","type","props","data","options","destroy","createChart","destroyChart","title","self","canvas","width","height","getContext","opts","Object","assign","chartSpec","object","isRequired","oneOf","keys","number","string"],"mappings":"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","file":"ChartBuilder.js","sourcesContent":["import Chart from 'chart.js'\nimport React, {Component} from 'react'\nimport PropTypes from 'prop-types'\n\nconst REV_CHART_SPEC = {\n  bar: {\n    defaultOptions: {\n      // Whether the scale should start at zero, or an order of magnitude down from the lowest value\n      scaleBeginAtZero: true,\n      scaleShowGridLines: true,\n      scaleGridLineColor: 'rgba(0,0,0,.05)',\n      scaleGridLineWidth: 1,\n      // Whether to show horizontal lines (except X axis)\n      scaleShowHorizontalLine: true,\n      // Whether to show vertical lines (except Y axis)\n      scaleShowVerticalLine: false,\n      barShowStroke: true,\n      barStrokeWidth: 2,\n      // Spacing between each of the X value sets\n      barValueSpacing: 5,\n      // Spacing between data sets within X values\n      barDatasetSpacing: 1,\n      // Amount extra to add to the radius to cater for hit detection outside the drawn point\n      pointHitDetectionRadius: 20,\n      // Whether to show a stroke for datasets\n      datasetStroke: true,\n      datasetStrokeWidth: 2,\n      datasetFill: false,\n    },\n  },\n  donut: {\n    defaultOptions: {\n      segmentShowStroke: true,\n      segmentStrokeColor: '#fff',\n      segmentStrokeWidth: 2,\n      percentageInnerCutout: 50,\n      animationSteps: 100,\n      animationEasing: 'easeOutBounce',\n      animateRotate: true,\n      animateScale: false,\n    },\n  },\n  line: {\n    defaultOptions: {\n      scaleShowGridLines: true,\n      scaleGridLineColor: 'rgba(0,0,0,.05)',\n      scaleGridLineWidth: 1,\n      scaleShowHorizontalLine: true,\n      scaleShowVerticalLine: false,\n      bezierCurve: false,\n      bezierCurveTension: 0.4,\n      pointDot: true,\n      pointDotRadius: 4,\n      pointDotStrokeWidth: 1,\n      pointHitDetectionRadius: 20,\n      datasetStroke: true,\n      datasetStrokeWidth: 2,\n      datasetFill: false,\n    },\n  },\n  pie: {\n    defaultOptions: {\n      segmentShowStroke: true,\n      segmentStrokeColor: '#fff',\n      segmentStrokeWidth: 2,\n      percentageInnerCutout: 0,\n      animationSteps: 100,\n      animationEasing: 'easeOutBounce',\n      animateRotate: true,\n      animateScale: false,\n    },\n  },\n  radar: {\n    defaultOptions: {\n      // Whether to show lines for each scale point\n      scaleShowLine: true,\n      // Whether we show the angle lines out of the radar\n      angleShowLineOut: true,\n      scaleShowLabels: false,\n      scaleBeginAtZero: true,\n      // Colour of the angle line\n      angleLineColor: 'rgba(0,0,0,.1)',\n      // Pixel width of the angle line\n      angleLineWidth: 1,\n      pointLabelFontFamily: 'Arial',\n      pointLabelFontStyle: 'normal',\n      pointLabelFontSize: 10,\n      pointLabelFontColor: '#666',\n      pointDot: true,\n      pointDotRadius: 3,\n      pointDotStrokeWidth: 1,\n      // amount extra to add to the radius to cater for hit detection outside the drawn point\n      pointHitDetectionRadius: 20,\n      datasetStroke: true,\n      datasetStrokeWidth: 2,\n      datasetFill: true,\n    },\n  },\n}\n\nexport default class ChartBuilder extends Component {\n  static get propTypes() {\n    return {\n      data: PropTypes.object.isRequired,\n      type: PropTypes.oneOf(Object.keys(REV_CHART_SPEC)).isRequired,\n      options: PropTypes.object,\n      width: PropTypes.number,\n      height: PropTypes.number,\n      title: PropTypes.string,\n    }\n  }\n\n  static get defaultProps() {\n    return {\n      title: 'Chart Title',\n      width: 300,\n      height: 300,\n    }\n  }\n\n  get ctx() {\n    return this.canvas.getContext('2d')\n  }\n\n  get chartSpec() {\n    return REV_CHART_SPEC[this.props.type]\n  }\n\n  get chartFuncName() {\n    return this.props.type\n  }\n\n  get options() {\n    const opts = Object.assign({}, this.chartSpec.defaultOptions)\n\n    return Object.assign(opts, this.props.options)\n  }\n\n  createChart() {\n    if(this._chart) {\n      throw new Error('`createChart` may only be called once.`')\n    }\n    this._chart = new Chart(\n      this.ctx,\n      {\n        type: this.props.type,\n        data: this.props.data,\n        options: this.options\n      }\n    )\n  }\n\n  destroyChart() {\n    this._chart.destroy()\n  }\n\n  componentDidMount() {\n    this.createChart()\n  }\n\n  componentWillUnmount() {\n    this.destroyChart()\n  }\n\n  render() {\n    return (\n      <div>\n        <h3 className=\"ChartTitle\">{this.props.title}</h3>\n        <canvas ref={(self) => { this.canvas = self }}\n          width={this.props.width}\n          height={this.props.height}\n        />\n      </div>\n    )\n  }\n}\n"]}