{"version":3,"sources":["../src/AuthenticityToken.test.js"],"names":["describe","it","provider","mount","token","find","expect","prop","to","eq"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEAA,SAAS,mBAAT,EAA8B,YAAM;AAClCC,KAAG,uCAAH,EAA4C,YAAM;AAChD,QAAIC,WAAWC,MACb;AAAA;AAAA,QAA2B,MAAK,MAAhC,EAAuC,OAAM,gBAA7C;AACE;AADF,KADa,CAAf;AAKA,QAAIC,QAAQF,SAASG,IAAT,CAAc,OAAd,CAAZ;;AAEAC,WAAOF,MAAMG,IAAN,CAAW,OAAX,CAAP,EAA4BC,EAA5B,CAA+BC,EAA/B,CAAkC,gBAAlC;AACD,GATD;;AAWAR,KAAG,mDAAH,EAAwD,YAAM;AAC5D,QAAIG,QAAQD,MAAM,sDAAN,CAAZ;AACD,GAFD;AAGD,CAfD","file":"AuthenticityToken.test.js","sourcesContent":["import AuthenticityToken from './AuthenticityToken'\nimport AuthenticityTokenProvider from './AuthenticityTokenProvider'\nimport sinon from 'sinon'\n\ndescribe('AuthenticityToken', () => {\n  it('can render with token provide context', () => {\n    let provider = mount(\n      <AuthenticityTokenProvider name=\"csrf\" value=\"plz no hackerz\">\n        <AuthenticityToken />\n      </AuthenticityTokenProvider>\n    )\n    let token = provider.find('input')\n\n    expect(token.prop('value')).to.eq('plz no hackerz')\n  })\n\n  it('can render without a token provider with no error', () => {\n    let token = mount(<AuthenticityToken />)\n  })\n})\n"]}