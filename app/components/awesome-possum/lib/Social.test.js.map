{"version":3,"sources":["../src/Social.test.js"],"names":["describe","it","shallow","types","FACEBOOK","inherentClassName","testClassName","childClassName","first","prop","expect","to","contain","tweetLink","renderedLink","TWITTER","equal","PATTERNS","BUFFER","DIGG","EMAIL","GOOGLE_PLUS","LINKEDIN","PINTEREST","REDDIT","TUMBLR","service","social","find"],"mappings":";;AAAA;;;;;;AAEAA,SAAS,QAAT,EAAmB,YAAM;AACvBC,KAAG,gCAAH,EAAqC,YAAM;AACzCC,YAAQ,wCAAQ,MAAM,iBAAOC,KAAP,CAAaC,QAA3B,EAAqC,KAAI,oBAAzC,GAAR;AACD,GAFD;;AAIAH,KAAG,+BAAH,EAAoC,YAAM;AACxC,QAAMI,oBAAoB,QAA1B;AACA,QAAMC,gBAAgB,UAAtB;;AAEA,QAAMC,iBAAiBL,QAAQ,wCAAQ,WAAWI,aAAnB,EAAkC,MAAM,iBAAOH,KAAP,CAAaC,QAArD,EAA+D,KAAI,oBAAnE,GAAR,EACpBI,KADoB,GAEpBC,IAFoB,CAEf,WAFe,CAAvB;;AAIAC,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCP,iBAAlC;AACAK,WAAOH,cAAP,EAAuBI,EAAvB,CAA0BC,OAA1B,CAAkCN,aAAlC;AACD,GAVD;;AAYAL,KAAG,8BAAH,EAAmC,YAAM;AACrC,QAAMY,YAAY,uFAAlB;;AAEA,QAAMC,eAAeZ,QAAQ,wCAAQ,MAAM,iBAAOC,KAAP,CAAaY,OAA3B,EAAoC,KAAI,mBAAxC,GAAR,EAAwEP,KAAxE,GAAgFC,IAAhF,CAAqF,MAArF,CAArB;;AAEAC,WAAOI,YAAP,EAAqBH,EAArB,CAAwBK,KAAxB,CAA8BH,SAA9B;AACH,GAND;;AAQAZ,KAAG,uBAAH,EAA4B,YAAM;AAChC,QAAMgB,WAAW;AACfC,cAAQ,QADO;AAEfC,YAAM,MAFS;AAGfC,aAAO,QAHQ;AAIfhB,gBAAU,UAJK;AAKfiB,mBAAa,QALE;AAMfC,gBAAU,UANK;AAOfC,iBAAW,WAPI;AAQfC,cAAQ,QARO;AASfC,cAAQ,QATO;AAUfV,eAAS;AAVM,KAAjB;;AAaA,SAAK,IAAIW,OAAT,IAAoB,iBAAOvB,KAA3B,EAAkC;AAChC,UAAMwB,SAASzB,QAAQ,wCAAQ,MAAM,iBAAOC,KAAP,CAAauB,OAAb,CAAd,EAAqC,KAAI,oBAAzC,GAAR,CAAf;;AAEAhB,aAAOiB,OAAOC,IAAP,CAAY,GAAZ,EAAiBnB,IAAjB,CAAsB,MAAtB,CAAP,EAAsCE,EAAtC,CAAyCC,OAAzC,CAAiDK,SAASS,OAAT,CAAjD;AACD;AACF,GAnBD;AAoBD,CA7CD","file":"Social.test.js","sourcesContent":["import Social from './Social'\n\ndescribe('Social', () => {\n  it('should render without throwing', () => {\n    shallow(<Social type={Social.types.FACEBOOK} url=\"https://revelry.co\" />)\n  })\n\n  it('should add className to child', () => {\n    const inherentClassName = 'social'\n    const testClassName = '__TEST__'\n\n    const childClassName = shallow(<Social className={testClassName} type={Social.types.FACEBOOK} url=\"https://revelry.co\" />)\n      .first()\n      .prop('className')\n\n    expect(childClassName).to.contain(inherentClassName)\n    expect(childClassName).to.contain(testClassName)\n  })\n\n  it('should render the right link', () => {\n      const tweetLink = \"https://twitter.com/intent/tweet?url=http%3A%2F%2Frevelry.co&text=Check%20this%20out!\"\n      \n      const renderedLink = shallow(<Social type={Social.types.TWITTER} url=\"http://revelry.co\" />).first().prop('href')\n\n      expect(renderedLink).to.equal(tweetLink)\n  })\n\n  it('can handle every type', () => {\n    const PATTERNS = {\n      BUFFER: 'buffer',\n      DIGG: 'digg',\n      EMAIL: 'mailto',\n      FACEBOOK: 'facebook',\n      GOOGLE_PLUS: 'google',\n      LINKEDIN: 'linkedin',\n      PINTEREST: 'pinterest',\n      REDDIT: 'reddit',\n      TUMBLR: 'tumblr',\n      TWITTER: 'twitter',\n    }\n\n    for (let service in Social.types) {\n      const social = shallow(<Social type={Social.types[service]} url=\"http://example.com\" />)\n\n      expect(social.find('a').prop('href')).to.contain(PATTERNS[service])\n    }\n  })\n})\n"]}