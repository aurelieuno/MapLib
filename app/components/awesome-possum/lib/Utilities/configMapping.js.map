{"version":3,"sources":["../../src/Utilities/configMapping.js"],"names":["configMapping","mapping","key","keyTransformer","trueValue","call","mappedValue","length","indexOf"],"mappings":";;;;;kBAuBwBA,a;AAvBxB;;;;;;;;;;;;;;;;;;;;;;;AAuBe,SAASA,aAAT,CAAuBC,OAAvB,EAAgCC,GAAhC,EAAqCC,cAArC,EAAqDC,SAArD,EAAgE;AAC7E,MAAIH,QAAQI,IAAZ,EAAkB;AAChB,QAAMC,cAAcL,QAAQC,GAAR,CAApB;AACA,WAAOI,eAAe,IAAf,GAAsBF,SAAtB,GAAkCE,WAAzC;AACD,GAHD,MAGO,IAAIL,QAAQM,MAAR,IAAkB,OAAON,QAAQM,MAAf,KAA0B,QAAhD,EAA0D;AAC/D,WAAON,QAAQO,OAAR,CAAgBL,eAAeD,GAAf,CAAhB,IAAuC,CAAC,CAAxC,GAA4CE,SAA5C,GAAwD,IAA/D;AACD,GAFM,MAEA;AACL,WAAOH,QAAQE,eAAeD,GAAf,CAAR,CAAP;AACD;AACF","file":"configMapping.js","sourcesContent":["/**\n * Function which accepts a variety of types of mappings and a key, and\n * determines what the mapped value of that key is. The common usage is taking a\n * prop which could be an object, array, or function, and is expected to return\n * a className string based on if it matches or not and what the key value is.\n *\n * This exists so we can abstract these types of things out of individual\n * components, and all they have to care about is using the mapped result.\n *\n * If mapping is a function: if true, return trueValue. Otherwise, return the\n * return value of mapping (usually false).\n *\n * If mapping is an object: return mapping[key].\n *\n * If mapping is an array: return trueValue if key is found in the array,\n * otherwise null.\n * @param {object|Array|Function} mapping - an object, array, or function.\n * @param {*} key - the key value to look up in the mapping\n * @param {*} keyTransformer - for lookups in objects or arrays, apply this\n * transform to the key first (typically used to flatten complex objects into\n * simple strings for object lookup)\n * @param {*} trueValue - value to return if the mapping lookup is true\n */\nexport default function configMapping(mapping, key, keyTransformer, trueValue) {\n  if (mapping.call) {\n    const mappedValue = mapping(key)\n    return mappedValue == true ? trueValue : mappedValue\n  } else if (mapping.length && typeof mapping.length === 'number') {\n    return mapping.indexOf(keyTransformer(key)) > -1 ? trueValue : null\n  } else {\n    return mapping[keyTransformer(key)]\n  }\n}\n"]}