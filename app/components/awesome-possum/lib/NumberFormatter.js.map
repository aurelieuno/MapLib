{"version":3,"sources":["../src/NumberFormatter.js"],"names":["NumberFormatter","text","omit","props","value","toLocaleString","locales","optionProps","number","isRequired","string","localeMatcher","oneOf","style","currency","currencyDisplay","useGrouping","bool","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","Component"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqBA,e;;;;;;;;;;;6BA2BV;AACP,aAAO;AAAA;AAAA;AAAO,aAAKC;AAAZ,OAAP;AACD;;;wBAViB;AAChB,aAAO,qBAAEC,IAAF,CAAO,KAAKC,KAAZ,EAAmB,CAAC,SAAD,EAAY,OAAZ,CAAnB,CAAP;AACD;;;wBAEU;AACT,aAAO,KAAKA,KAAL,CAAWC,KAAX,CAAiBC,cAAjB,CAAgC,KAAKF,KAAL,CAAWG,OAA3C,EAAoD,KAAKC,WAAzD,CAAP;AACD;;;wBAvBsB;AACrB,aAAO;AACLH,eAAO,oBAAUI,MAAV,CAAiBC,UADnB;AAELH,iBAAS,oBAAUI,MAFd;AAGLC,uBAAe,oBAAUC,KAAV,CAAgB,CAAC,QAAD,EAAW,UAAX,CAAhB,CAHV;AAILC,eAAO,oBAAUD,KAAV,CAAgB,CAAC,SAAD,EAAY,UAAZ,EAAwB,SAAxB,CAAhB,CAJF;AAKLE,kBAAU,oBAAUJ,MALf;AAMLK,yBAAiB,oBAAUH,KAAV,CAAgB,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,CAAhB,CANZ;AAOLI,qBAAa,oBAAUC,IAPlB;AAQLC,8BAAsB,oBAAUV,MAR3B;AASLW,+BAAuB,oBAAUX,MAT5B;AAULY,+BAAuB,oBAAUZ,MAV5B;AAWLa,kCAA0B,oBAAUb,MAX/B;AAYLc,kCAA0B,oBAAUd;AAZ/B,OAAP;AAcD;;;;EAjB0C,gBAAMe,S;;kBAA9BvB,e","file":"NumberFormatter.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'underscore'\n\nexport default class NumberFormatter extends React.Component {\n\n  static get propTypes() {\n    return {\n      value: PropTypes.number.isRequired,\n      locales: PropTypes.string,\n      localeMatcher: PropTypes.oneOf(['lookup', 'best fit']),\n      style: PropTypes.oneOf(['decimal', 'currency', 'percent']),\n      currency: PropTypes.string,\n      currencyDisplay: PropTypes.oneOf(['symbol', 'code', 'name']),\n      useGrouping: PropTypes.bool,\n      minimumIntegerDigits: PropTypes.number,\n      minimumFractionDigits: PropTypes.number,\n      maximumFractionDigits: PropTypes.number,\n      minimumSignificantDigits: PropTypes.number,\n      maximumSignificantDigits: PropTypes.number,\n    }\n  }\n\n  get optionProps() {\n    return _.omit(this.props, ['locales', 'value'])\n  }\n\n  get text() {\n    return this.props.value.toLocaleString(this.props.locales, this.optionProps)\n  }\n\n  render() {\n    return <span>{this.text}</span>\n  }\n}\n"]}